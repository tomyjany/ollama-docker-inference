
events {
  use epoll;
  worker_connections 1024;
}

http {
  map_hash_max_size 128;
  map_hash_bucket_size 128;
  
  include apikeys.conf;
  # will provide $api_client_name

  server {
    listen 5050;
    location / {
      auth_request /_validate_apikey;
      proxy_pass http://ollama:11434/;
      proxy_http_version 1.1;
      
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header Content-Type 'text/event-stream';
      
      proxy_cache_bypass $http_upgrade;
      
      # Disable buffering for the streaming responses
      proxy_buffering off;
    }

#    location = /_validate_apikey {
#      internal;
#
#      if ($http_apikey = "") {
#        return 401; # Unauthorized (no apikey)
#      }
#
#      if ($api_client_name = "") {
#        return 403; # Forbidden (unknown apikey)
#      }
#
#      return 204; # OK (no content)
#    }
# }

  # this way, it will be compatible with openai Python object, where openai sends bearer token  in such format
  location = /_validate_apikey {
    internal;

    # Extract the Bearer token from the Authorization header
    set $http_apikey "";
    if ($http_authorization ~* "Bearer (.+)") {
        set $http_apikey $1;
    }
    # Validate the extracted token against the mapped API keys
    if ($api_client_name = "") {
        return 401; # Unauthorized (invalid apikey)
    }

    return 204; # OK (no content)
  }
  
}
